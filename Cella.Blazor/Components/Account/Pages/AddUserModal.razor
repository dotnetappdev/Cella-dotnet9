@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json

@if (IsOpen)
{
    <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add User</h5>
                    <button type="button" class="btn-close" @onclick="Close" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="newUser" OnValidSubmit="CreateUserAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label class="form-label">Username</label>
                            <InputText class="form-control" @bind-Value="newUser.UserName" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText class="form-control" @bind-Value="newUser.Email" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <InputText class="form-control" @bind-Value="newUser.Password" type="password" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Confirm Password</label>
                            <InputText class="form-control" @bind-Value="newUser.ConfirmPassword" type="password" />
                        </div>
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mt-2">@errorMessage</div>
                        }
                        <div class="modal-footer">
                            <button class="btn btn-primary" type="submit" disabled="@isSubmitting">Create</button>
                            <button class="btn btn-secondary" type="button" @onclick="Close">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public EventCallback OnUserAdded { get; set; }
    [Inject] public HttpClient Http { get; set; }
    [Inject] public NavigationManager Navigation { get; set; }

    private NewUserModel newUser = new();
    private bool isSubmitting = false;
    private string errorMessage;
    private bool IsOpen { get; set; }

    public void Open()
    {
        newUser = new();
        errorMessage = null;
        IsOpen = true;
        StateHasChanged();
    }
    private void Close()
    {
        IsOpen = false;
        StateHasChanged();
    }
    private async Task CreateUserAsync()
    {
        isSubmitting = true;
        errorMessage = null;
        try
        {
            var response = await Http.PostAsJsonAsync("api/account/register", newUser);
            if (response.IsSuccessStatusCode)
            {
                IsOpen = false;
                if (OnUserAdded.HasDelegate)
                    await OnUserAdded.InvokeAsync();
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        isSubmitting = false;
    }
    public class NewUserModel
    {
        [Required]
        public string UserName { get; set; }
        [Required, EmailAddress]
        public string Email { get; set; }
        [Required, MinLength(6)]
        public string Password { get; set; }
        [Required, Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }
    }
}
