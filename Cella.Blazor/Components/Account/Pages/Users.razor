@page "/Account/Manage/Users"
@using Cella.Components
@using Cella.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore


@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject NavigationManager Navigation

<h3>User Listing</h3>

<button class="btn btn-primary" @onclick="ShowAddUserModal">Add User</button>
<button class="btn btn-secondary" @onclick="ShowAddUserToRoleModal">Add User to Role</button>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Roles</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in users)
        {
            <tr>
                <td>@user.UserName</td>
                <td>@user.Email</td>
                <td>@string.Join(", ", userRoles[user.Id])</td>
            </tr>
        }
    </tbody>
</table>

<!-- Add User Modal -->
<AddUserModal @ref="addUserModal" OnUserAdded="OnUserAdded" />

<!-- Add User to Role Modal -->
<AddUserToRoleModal @ref="addUserToRoleModal" OnUserRoleAdded="OnUserRoleAdded" />

@code {
    private List<ApplicationUser> users = new List<ApplicationUser>();
    private Dictionary<string, List<string>> userRoles = new Dictionary<string, List<string>>();
    

    protected override async Task OnInitializedAsync()
    {
        // Fetch users and their roles
        users = await UserManager.Users.ToListAsync();
        
        foreach (var user in users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            userRoles[user.Id] = roles.ToList();
        }
    }

    private void ShowAddUserModal()
    {
        addUserModal.Open();
    }

    private void ShowAddUserToRoleModal()
    {
        addUserToRoleModal.Open();
    }

    private async Task OnUserAdded()
    {
        await LoadUsers();
    }

    private async Task OnUserRoleAdded()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = await UserManager.Users.ToListAsync();
        foreach (var user in users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            userRoles[user.Id] = roles.ToList();
        }
    }
}
