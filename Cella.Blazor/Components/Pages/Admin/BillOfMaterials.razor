@page "/admin/billofmaterials"
@layout AdminLayout
@using Cella.Models
@inject HttpClient Http

<h3>Bill of Materials Management</h3>

@if (boms == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary mb-2" @onclick="ShowAddModal">Add Bill of Materials</button>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Items</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var bom in boms)
            {
                <tr>
                    <td>@bom.Name</td>
                    <td>
                        <ul>
                            @foreach (var item in bom.Items)
                            {
                                <li>@item.ComponentName (Qty: @item.Quantity)</li>
                            }
                        </ul>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-secondary me-1" @onclick="() => EditBom(bom)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteBom(bom.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<EditBomModal @ref="editBomModal" OnSaved="LoadBoms" />

@code {
    private List<BillOfMaterials> boms;
    private EditBomModal editBomModal;

    protected override async Task OnInitializedAsync()
    {
        await LoadBoms();
    }
    private async Task LoadBoms()
    {
        boms = await Http.GetFromJsonAsync<List<BillOfMaterials>>("api/billofmaterials");
        StateHasChanged();
    }
    private void ShowAddModal()
    {
        editBomModal.Open(null);
    }
    private void EditBom(BillOfMaterials bom)
    {
        editBomModal.Open(bom);
    }
    private async Task DeleteBom(int id)
    {
        await Http.DeleteAsync($"api/billofmaterials/{id}");
        await LoadBoms();
    }
}
