@using Cella.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@using Cella.Blazor.Components
@using Cella.Blazor.Components.Modal
@using Cella.Blazor.Components.Layout
@inject HttpClient Http

<Modal @bind-Visible="Visible">
    <ModalHeader>@(Bom.Id == 0 ? "Add Bill of Materials" : "Edit Bill of Materials")</ModalHeader>
    <ModalBody>
        <EditForm Model="Bom" OnValidSubmit="SaveBom">
            <div class="mb-2">
                <label>Name</label>
                <InputText class="form-control" @bind-Value="Bom.Name" />
            </div>
            <div class="mb-2">
                <label>Items</label>
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Bom.Items.Count; i++)
                        {
                            <tr>
                                <td>
                                    <input class="form-control" list="product-list-@i" @bind="Bom.Items[i].ProductSearch" @oninput="(e) => OnProductInput(i, e.Value?.ToString())" placeholder="Type or pick product..." />
                                    <datalist id="product-list-@i">
                                        @if (products != null)
                                        {
                                            foreach (var p in products)
                                            {
                                                <option value="@p.Name (@p.StockCode)"></option>
                                            }
                                        }
                                    </datalist>
                                </td>
                                <td><InputNumber class="form-control" @bind-Value="Bom.Items[i].Quantity" /></td>
                                <td>
                                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveItem(i)"><span class="bi bi-trash"></span></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" class="btn btn-success btn-sm" @onclick="AddItem"><span class="bi bi-plus"></span> Add Item</button>
            </div>
            <Cella.Blazor.Components.ModalFooter>
                <button class="btn btn-primary" type="submit">Save</button>
                <button class="btn btn-secondary" type="button" @onclick="Close">Cancel</button>
            </Cella.Blazor.Components.ModalFooter>
        </EditForm>
    </ModalBody>
</Modal>

@code {
    [Parameter] public BillOfMaterials Bom { get; set; } = new();
    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }

    private List<StockItem> products;

    protected override async Task OnInitializedAsync()
    {
        products = await Http.GetFromJsonAsync<List<StockItem>>("api/products/sample");
    }

    private async Task SaveBom()
    {
        if (Bom.Id == 0)
            await Http.PostAsJsonAsync("api/billofmaterials", Bom);
        else
            await Http.PutAsJsonAsync($"api/billofmaterials/{Bom.Id}", Bom);
        await OnSaved.InvokeAsync();
        await Close();
    }
    private void AddItem() => Bom.Items.Add(new BillOfMaterialsItem());
    private void RemoveItem(int idx) { if (Bom.Items.Count > 1) Bom.Items.RemoveAt(idx); }
    private async Task Close() => await VisibleChanged.InvokeAsync(false);
    private void OnProductInput(int idx, string value)
    {
        if (string.IsNullOrWhiteSpace(value)) return;
        var match = products?.FirstOrDefault(p => $"{p.Name} ({p.StockCode})".Equals(value, StringComparison.OrdinalIgnoreCase) || p.StockCode?.Equals(value, StringComparison.OrdinalIgnoreCase) == true);
        if (match != null)
        {
            Bom.Items[idx].StockItemId = match.Id;
            Bom.Items[idx].ComponentName = match.Name;
        }
        else
        {
            Bom.Items[idx].StockItemId = 0;
            Bom.Items[idx].ComponentName = value;
        }
    }
    public partial class BillOfMaterialsItem
    {
        public string ProductSearch { get; set; } // for UI binding only
    }
}
