@page "/admin/pick-list"
@layout AdminLayout
@using Cella.Models
@inject HttpClient Http

<h3>Pick List Management</h3>

<button class="btn btn-success mb-3" @onclick="ShowAddModal">Add Pick List</button>

@if (pickLists == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Pick List #</th>
                <th>Date</th>
                <th>Items</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pick in pickLists)
            {
                <tr>
                    <td>@pick.Id</td>
                    <td>@pick.DateCreated?.ToString("yyyy-MM-dd")</td>
                    <td>@pick.Items?.Count()</td>
                    <td>@pick.Status</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-1" @onclick="() => EditPick(pick)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeletePick(pick.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<EditForm Model="editPick" OnValidSubmit="SavePick">
    <Modal @bind-Visible="showModal">
        <ModalHeader>@(editPick.Id == 0 ? "Add Pick List" : "Edit Pick List")</ModalHeader>
        <ModalBody>
            <div class="mb-2">
                <label>Date</label>
                <InputDate class="form-control" @bind-Value="editPick.DateCreated" />
            </div>
            <div class="mb-2">
                <label>Status</label>
                <InputText class="form-control" @bind-Value="editPick.Status" />
            </div>
            <div class="mb-2">
                <label>Items</label>
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < editPick.ItemInputs.Count; i++)
                        {
                            <tr>
                                <td>
                                    <input class="form-control" list="picklist-product-list-@i" @bind="editPick.ItemInputs[i]" @oninput="(e) => OnPickListProductInput(i, e.Value?.ToString())" placeholder="Type or pick product..." />
                                    <datalist id="picklist-product-list-@i">
                                        @if (products != null)
                                        {
                                            foreach (var p in products)
                                            {
                                                <option value="@p.Name (@p.StockCode)"></option>
                                            }
                                        }
                                    </datalist>
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemovePickListItem(i)"><span class="bi bi-trash"></span></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" class="btn btn-success btn-sm" @onclick="AddPickListItem"><span class="bi bi-plus"></span> Add Item</button>
            </div>
        </ModalBody>
        <ModalFooter>
            <button class="btn btn-primary" type="submit">Save</button>
            <button class="btn btn-secondary" type="button" @onclick="() => showModal = false">Cancel</button>
        </ModalFooter>
    </Modal>
</EditForm>

@code {
    private List<PickListModel> pickLists;
    private PickListModel editPick = new PickListModel();
    private bool showModal = false;
    private List<StockItem> products;

    protected override async Task OnInitializedAsync()
    {
        await LoadPickLists();
        products = await Http.GetFromJsonAsync<List<StockItem>>("api/products/sample");
    }
    private async Task LoadPickLists()
    {
        pickLists = await Http.GetFromJsonAsync<List<PickListModel>>("api/picklists");
    }
    private void ShowAddModal()
    {
        editPick = new PickListModel();
        editPick.ItemInputs = new List<string> { "" };
        showModal = true;
    }
    private void EditPick(PickListModel pick)
    {
        editPick = new PickListModel
        {
            Id = pick.Id,
            DateCreated = pick.DateCreated,
            Status = pick.Status,
            Items = pick.Items,
            ItemInputs = pick.Items?.ToList() ?? new List<string> { "" }
        };
        showModal = true;
    }
    private void AddPickListItem()
    {
        editPick.ItemInputs.Add("");
    }
    private void RemovePickListItem(int idx)
    {
        if (editPick.ItemInputs.Count > 1)
            editPick.ItemInputs.RemoveAt(idx);
    }
    private void OnPickListProductInput(int idx, string value)
    {
        if (string.IsNullOrWhiteSpace(value)) return;
        var match = products?.FirstOrDefault(p => $"{p.Name} ({p.StockCode})".Equals(value, StringComparison.OrdinalIgnoreCase) || p.StockCode?.Equals(value, StringComparison.OrdinalIgnoreCase) == true);
        if (match != null)
        {
            editPick.ItemInputs[idx] = $"{match.Name} ({match.StockCode})";
        }
        else
        {
            editPick.ItemInputs[idx] = value;
        }
    }
    private async Task SavePick()
    {
        editPick.Items = editPick.ItemInputs.ToList();
        if (editPick.Id == 0)
            await Http.PostAsJsonAsync("api/picklists", editPick);
        else
            await Http.PutAsJsonAsync($"api/picklists/{editPick.Id}", editPick);
        showModal = false;
        await LoadPickLists();
    }
    private async Task DeletePick(int id)
    {
        await Http.DeleteAsync($"api/picklists/{id}");
        await LoadPickLists();
    }

    public class PickListModel
    {
        public int Id { get; set; }
        public DateTime? DateCreated { get; set; }
        public string Status { get; set; }
        public List<string> Items { get; set; } = new();
        public List<string> ItemInputs { get; set; } = new();
    }
}
