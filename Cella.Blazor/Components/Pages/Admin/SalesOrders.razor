@page "/admin/salesorders"
@layout AdminLayout
@using Cella.Models
@using Cella.Blazor.Components.Pages.SalesOrders
@inject HttpClient Http

<h3>Manage Sales Orders</h3>

<div class="card mb-4">
    <div class="card-header">Create New Sales Order</div>
    <div class="card-body">
        <EditForm Model="newOrder" OnValidSubmit="CreateOrder">
            <div class="mb-3">
                <label class="form-label">Type Role</label>
                <div>
                    <InputRadioGroup @bind-Value="newOrder.TypeRole">
                        <InputRadio Value="Agent" /> Agent
                        <InputRadio Value="Customer" class="ms-3" /> Customer
                    </InputRadioGroup>
                </div>
            </div>
            @if (newOrder.TypeRole == "Agent")
            {
                <div class="mb-3">
                    <label class="form-label">Customer</label>
                    <InputSelect class="form-select" @bind-Value="newOrder.Customer">
                        <option value="">Select Customer</option>
                        @if (customers != null)
                        {
                            @foreach (var c in customers)
                            {
                                <option value="@c.Id">@c.Name</option>
                            }
                        }
                    </InputSelect>
                </div>
            }
            <div>
                <table class="table table-bordered align-middle">
                    <thead>
                        <tr>
                            <th style="width:30%">Product</th>
                            <th style="width:15%">Quantity</th>
                            <th style="width:15%">Unit Price</th>
                            <th style="width:20%">BOM</th>
                            <th style="width:10%">Line Total</th>
                            <th style="width:10%"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < newOrder.Lines.Count; i++)
                        {
                            <tr>
                                <td>
                                    <input class="form-control" list="order-product-list-@i" @bind="newOrder.Lines[i].ProductSearch" @oninput="(e) => OnOrderProductInput(i, e.Value?.ToString())" placeholder="Type or pick product..." />
                                    <datalist id="order-product-list-@i">
                                        @if (products != null)
                                        {
                                            foreach (var p in products)
                                            {
                                                <option value="@p.Name (@p.StockCode)"></option>
                                            }
                                        }
                                    </datalist>
                                </td>
                                <td>
                                    <InputNumber class="form-control" @bind-Value="newOrder.Lines[i].Quantity" min="1" />
                                </td>
                                <td>
                                    <InputNumber class="form-control" @bind-Value="newOrder.Lines[i].Price" step="0.01" />
                                </td>
                                <td>
                                    <InputSelect class="form-select" @bind-Value="newOrder.Lines[i].BillOfMaterialsId">
                                        <option value="">None</option>
                                        @if (boms != null)
                                        {
                                            @foreach (var bom in boms)
                                            {
                                                <option value="@bom.Id">@bom.Name</option>
                                            }
                                        }
                                    </InputSelect>
                                </td>
                                <td>
                                    @((newOrder.Lines[i].Quantity * newOrder.Lines[i].Price).ToString("C"))
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveLine(i)"><span class="bi bi-trash"></span></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" class="btn btn-success btn-sm" @onclick="AddLine"><span class="bi bi-plus"></span> Add Line</button>
            </div>
            <div class="mt-3">
                <strong>Order Total: @OrderTotal.ToString("C")</strong>
            </div>
            <button type="submit" class="btn btn-primary mt-3">Create Order</button>
        </EditForm>
    </div>
</div>

@if (orders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Order Id</th>
                <th>Customer</th>
                <th>Order Total</th>
                <th>Assign Driver</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.Id</td>
                    <td>@order.Customer</td>
                    <td>@order.OrderTotal</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => ShowAssignDriverModal(order.Id)">Assign Driver</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<AssignDriverModal @ref="assignDriverModal" OnDriverAssigned="LoadOrders" />

@code {
    private List<SalesOrder> orders;
    private List<Customer> customers;
    private List<StockItem> products;
    private List<BillOfMaterials> boms;
    private AssignDriverModal assignDriverModal;
    private int selectedOrderId;

    private SalesOrderCreateModel newOrder = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
        await LoadCustomers();
        await LoadProducts();
        await LoadBoms();
        if (newOrder.Lines.Count == 0) AddLine();
    }
    private async Task LoadOrders()
    {
        orders = await Http.GetFromJsonAsync<List<SalesOrder>>("api/salesorders");
        StateHasChanged();
    }
    private async Task LoadCustomers()
    {
        customers = await Http.GetFromJsonAsync<List<Customer>>("api/salesorders/customers");
    }
    private async Task LoadProducts()
    {
        products = await Http.GetFromJsonAsync<List<StockItem>>("api/products/sample");
    }
    private async Task LoadBoms()
    {
        boms = await Http.GetFromJsonAsync<List<BillOfMaterials>>("api/salesorders/billofmaterials");
    }
    private void ShowAssignDriverModal(int orderId)
    {
        selectedOrderId = orderId;
        assignDriverModal.Open(orderId);
    }
    private void AddLine()
    {
        newOrder.Lines.Add(new SalesOrderLineModel());
    }
    private void RemoveLine(int idx)
    {
        if (newOrder.Lines.Count > 1)
            newOrder.Lines.RemoveAt(idx);
    }
    private decimal OrderTotal => newOrder.Lines.Sum(l => l.Quantity * l.Price);

    private async Task CreateOrder()
    {
        var order = new SalesOrder
        {
            Customer = newOrder.TypeRole == "Agent" ? newOrder.Customer : null,
            Lines = newOrder.Lines.Select(l => new SalesOrderLine
            {
                StockItemId = l.StockItemId,
                Quantity = l.Quantity,
                Price = l.Price,
                BillOfMaterialsId = l.BillOfMaterialsId
            }).ToList(),
            OrderTotal = OrderTotal,
            CreateDate = DateTime.Now,
            isActive = true,
            isDeleted = false
        };
        await Http.PostAsJsonAsync("api/salesorders", order);
        newOrder = new SalesOrderCreateModel();
        AddLine();
        await LoadOrders();
    }

    private void OnOrderProductInput(int idx, string value)
    {
        if (string.IsNullOrWhiteSpace(value)) return;
        var match = products?.FirstOrDefault(p => $"{p.Name} ({p.StockCode})".Equals(value, StringComparison.OrdinalIgnoreCase) || p.StockCode?.Equals(value, StringComparison.OrdinalIgnoreCase) == true);
        if (match != null)
        {
            newOrder.Lines[idx].StockItemId = match.Id;
            newOrder.Lines[idx].ProductSearch = value;
        }
        else
        {
            newOrder.Lines[idx].StockItemId = 0;
            newOrder.Lines[idx].ProductSearch = value;
        }
    }

    public class SalesOrderCreateModel
    {
        public string TypeRole { get; set; } = "Customer";
        public int? Customer { get; set; }
        public List<SalesOrderLineModel> Lines { get; set; } = new();
    }
    public class SalesOrderLineModel
    {
        public int StockItemId { get; set; }
        public int Quantity { get; set; } = 1;
        public decimal Price { get; set; }
        public int? BillOfMaterialsId { get; set; }
        public string ProductSearch { get; set; } // for UI binding only
    }
}
