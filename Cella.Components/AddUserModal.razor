@using Cella.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms

@inject UserManager<ApplicationUser> UserManager

<div class="modal" tabindex="-1" style="display:@(isModalOpen ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add User</h5>
                <button type="button" class="close" @onclick="Close">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="this" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="userName">Username</label>
                        <InputText id="userName" @bind-Value="userName" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="email">Email</label>
                        <InputText id="email" @bind-Value="email" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="password">Password</label>
                        <InputText id="password" @bind-Value="password" class="form-control" />
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isModalOpen = false;
    private string userName;
    private string email;
    private string password;

    [Parameter] public EventCallback OnUserAdded { get; set; }

    private async Task HandleSubmit()
    {
        var user = new ApplicationUser
        {
            UserName = userName,
            Email = email
        };

        var result = await UserManager.CreateAsync(user, password);

        if (result.Succeeded)
        {
            // Close the modal and reset the form
            isModalOpen = false;
            userName = email = password = string.Empty;
            await OnUserAdded.InvokeAsync();
        }
        else
        {
            // Handle errors
            foreach (var error in result.Errors)
            {
                Console.WriteLine(error.Description);
            }
        }
    }

    public void Open() => isModalOpen = true;
    public void Close() => isModalOpen = false;
}
