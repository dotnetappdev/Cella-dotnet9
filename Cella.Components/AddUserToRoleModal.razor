@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using Cella.Models
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager

<div class="modal" tabindex="-1" style="display:@(isModalOpen ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add User to Role</h5>
                <button type="button" class="close" @onclick="Close">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="this" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="user">Select User</label>
                        <select id="user" @bind="selectedUserId" class="form-control">
                            @foreach (var user in usersList)
                            {
                                <option value="@user.Id">@user.UserName</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="role">Select Role</label>
                        <select id="role" @bind="selectedRole" class="form-control">
                            @foreach (var role in rolesList)
                            {
                                <option value="@role">@role</option>
                            }
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary">Assign Role</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isModalOpen = false;
    private string selectedUserId;
    private string selectedRole;

    private List<ApplicationUser> usersList;
    private List<string> rolesList;

    [Parameter] public EventCallback OnUserRoleAdded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        rolesList = await RoleManager.Roles.Select(r => r.Name).ToListAsync();
        usersList = await UserManager.Users.ToListAsync();
    }

    private async Task HandleSubmit()
    {
        var user = await UserManager.FindByIdAsync(selectedUserId);
        
        if (user != null)
        {
            var result = await UserManager.AddToRoleAsync(user, selectedRole);
            
            if (result.Succeeded)
            {
                isModalOpen = false;
                selectedRole = string.Empty;
                selectedUserId = string.Empty;
                await OnUserRoleAdded.InvokeAsync();
            }
            else
            {
                // Handle errors
                foreach (var error in result.Errors)
                {
                    Console.WriteLine(error.Description);
                }
            }
        }
    }

    public void Open() => isModalOpen = true;
    public void Close() => isModalOpen = false;
}
